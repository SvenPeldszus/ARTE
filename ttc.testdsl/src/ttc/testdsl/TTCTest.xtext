grammar ttc.testdsl.TTCTest with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate tTCTest "http://www.testdsl.ttc/TTCTest"

Test_File:
	'TestFile' name = ID '{'
		(
			(test_cases   += Test_Case) |
			(java_class   += Java_Class) |
			(java_classes += Classes) |
			(java_method  += Java_Method) |
			//(java_methods += Methods) |
			//(java_field   += Java_Field) |
			//(java_fields  += Fields) |
			(refactorings += Refactoring_Instance)
		)*
	'}'
;
	
Java_Class:
	'class' name = ID '{'
	 	('package' package = STRING)?
		'name' class_name = STRING
	'}'
;

Classes:
	'classes' name = ID '{'
	(classes += [Java_Class])(','classes += [Java_Class])* 
	'}'
;

Java_Method:
	'method' name = ID '{'
		'name' method_name = STRING
		('params' (params += [Java_Class])(','params += [Java_Class])*)?
	'}'
;

Methods:
	'methods' name = ID '{'
	(methods += [Java_Method])*
	'}'
;

Java_Field:
	'field' name = ID '{'
		'name' field_name = STRING 
		'type' type = [Java_Class]
	'}'
;

Fields:
	'fields' name = ID '{'
	(fields += [Java_Field])*
	'}'
;
	
Test_Case:
	'case' name = ID '{'
		'description' description = STRING
		'program' java_program = STRING
		test_flow = Test_Flow
	'}'
;

Refactoring_Instance:
	Pull_Up_Refactoring | Create_Superclass_Refactoring
;

Refactoring:
	Refactoring_Instance |No_Refactoring
;

Pull_Up_Refactoring:
	'pullup_method' name = ID '{'
		'parent' 	parent = [Java_Class]
		'method'	method  = [Java_Method]
	'}'
;

Create_Superclass_Refactoring:
	'create_superclass' name = ID '{'
		'child'		child	= [Classes]
		'target'	target	= [Java_Class]
	'}'
;

Test_Flow:
	'testflow' '{'
		(step += Test_Step_Element)+
	'}'
;

Test_Step:
	'step' '{'
		(elements += Test_Step_Element)+
	'}'
;

Test_Step_Element:
	//Propose_Refactoring | Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation
	Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation
;

Assertion: 
	Assert_False | Assert_True
;

Assert_False:
	'assertFalse' '(' input=[Refactoring] ')'
;

Assert_True:
	'assertTrue' '(' input=[Refactoring] ')'
;

Condition:
	Expect_True | Expect_False
;

Expect_True:
	'expectTrue''('refactoring = [Refactoring]')' '{'
		(true_steps += Test_Step_Element)+
	'}'
	'else' '{'
		(warning = Warning)?
		(false_steps += Test_Step_Element)+
	'}'
;

Expect_False:
	'expectFalse''('refactoring = [Refactoring]')' '{'
		(false_steps += Test_Step_Element)+
	'}'
	'else' '{'
		(warning = Warning)?
		(true_steps += Test_Step_Element)+
	'}'
;

Warning: 'warning' message = STRING;

Compile: {Compile} 'compile';

Synchronize: {Synchronize} 'synchronize';

No_Refactoring: {No_Refactoring} 'none';

Propose_Refactoring:
	Propose_Pullup_Method_Refactoring | Propose_Create_Superclass_Refactoring
;

Propose_Pullup_Method_Refactoring:
	'proposePullUpRefactoring' '('refactoring = ([Pull_Up_Refactoring] | No_Refactoring)')'
;

Propose_Create_Superclass_Refactoring:
	'proposeCreateSuperclassRefactoring''('refactoring = ([Create_Superclass_Refactoring] | No_Refactoring)')'
;

Containment:
	Contains | Contains_Not
;

Class_Element:
	Java_Field | Java_Method
;

Contains:
	class = [Java_Class] 'contains' contains = [Class_Element]
;


Contains_Not:
	class = [Java_Class] '~contains' contains = [Class_Element]
;

Implementation:
	Implements | Implements_Not
;

Implements:
	child = [Java_Class] 'extends' parent = [Java_Class]
;

Implements_Not:
	child = [Java_Class] '~extends' parent = [Java_Class]
;

terminal BOOLEAN returns ecore::EBoolean: 'true' | 'false';
terminal FLOAT returns ecore::EFloat: (INT'.'INT('d'?));
terminal DOUBLE returns ecore::EDouble: (INT'.'INT'f');
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal STRING returns ecore::EString: '"'(' '..'~')* '"'
		; 
