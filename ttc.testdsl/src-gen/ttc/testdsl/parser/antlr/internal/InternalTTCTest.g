/*
 * generated by Xtext
 */
grammar InternalTTCTest;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ttc.testdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ttc.testdsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ttc.testdsl.services.TTCTestGrammarAccess;

}

@parser::members {

 	private TTCTestGrammarAccess grammarAccess;
 	
    public InternalTTCTestParser(TokenStream input, TTCTestGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Test_File";	
   	}
   	
   	@Override
   	protected TTCTestGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTest_File
entryRuleTest_File returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTest_FileRule()); }
	 iv_ruleTest_File=ruleTest_File 
	 { $current=$iv_ruleTest_File.current; } 
	 EOF 
;

// Rule Test_File
ruleTest_File returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TestFile' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTest_FileAccess().getTestFileKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTest_FileAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTest_FileRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTest_FileAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTest_FileAccess().getTest_casesTest_CaseParserRuleCall_3_0_0()); 
	    }
		lv_test_cases_3_0=ruleTest_Case		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTest_FileRule());
	        }
       		add(
       			$current, 
       			"test_cases",
        		lv_test_cases_3_0, 
        		"Test_Case");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTest_FileAccess().getJava_classJava_ClassParserRuleCall_3_1_0()); 
	    }
		lv_java_class_4_0=ruleJava_Class		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTest_FileRule());
	        }
       		add(
       			$current, 
       			"java_class",
        		lv_java_class_4_0, 
        		"Java_Class");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTest_FileAccess().getJava_classesClassesParserRuleCall_3_2_0()); 
	    }
		lv_java_classes_5_0=ruleClasses		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTest_FileRule());
	        }
       		add(
       			$current, 
       			"java_classes",
        		lv_java_classes_5_0, 
        		"Classes");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTest_FileAccess().getJava_methodJava_MethodParserRuleCall_3_3_0()); 
	    }
		lv_java_method_6_0=ruleJava_Method		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTest_FileRule());
	        }
       		add(
       			$current, 
       			"java_method",
        		lv_java_method_6_0, 
        		"Java_Method");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTest_FileAccess().getRefactoringsRefactoring_InstanceParserRuleCall_3_4_0()); 
	    }
		lv_refactorings_7_0=ruleRefactoring_Instance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTest_FileRule());
	        }
       		add(
       			$current, 
       			"refactorings",
        		lv_refactorings_7_0, 
        		"Refactoring_Instance");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTest_FileAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleJava_Class
entryRuleJava_Class returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJava_ClassRule()); }
	 iv_ruleJava_Class=ruleJava_Class 
	 { $current=$iv_ruleJava_Class.current; } 
	 EOF 
;

// Rule Java_Class
ruleJava_Class returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJava_ClassAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getJava_ClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_ClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJava_ClassAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='package' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJava_ClassAccess().getPackageKeyword_3_0());
    }
(
(
		lv_package_4_0=RULE_STRING
		{
			newLeafNode(lv_package_4_0, grammarAccess.getJava_ClassAccess().getPackageSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_ClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"package",
        		lv_package_4_0, 
        		"STRING");
	    }

)
))?	otherlv_5='name' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJava_ClassAccess().getNameKeyword_4());
    }
(
(
		lv_class_name_6_0=RULE_STRING
		{
			newLeafNode(lv_class_name_6_0, grammarAccess.getJava_ClassAccess().getClass_nameSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_ClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"class_name",
        		lv_class_name_6_0, 
        		"STRING");
	    }

)
)	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJava_ClassAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClasses
entryRuleClasses returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassesRule()); }
	 iv_ruleClasses=ruleClasses 
	 { $current=$iv_ruleClasses.current; } 
	 EOF 
;

// Rule Classes
ruleClasses returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='classes' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassesAccess().getClassesKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassesAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassesAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassesRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getClassesAccess().getClassesJava_ClassCrossReference_3_0()); 
	}

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassesAccess().getCommaKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassesRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getClassesAccess().getClassesJava_ClassCrossReference_4_1_0()); 
	}

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassesAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleJava_Method
entryRuleJava_Method returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJava_MethodRule()); }
	 iv_ruleJava_Method=ruleJava_Method 
	 { $current=$iv_ruleJava_Method.current; } 
	 EOF 
;

// Rule Java_Method
ruleJava_Method returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='method' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJava_MethodAccess().getMethodKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getJava_MethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_MethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJava_MethodAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='name' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJava_MethodAccess().getNameKeyword_3());
    }
(
(
		lv_method_name_4_0=RULE_STRING
		{
			newLeafNode(lv_method_name_4_0, grammarAccess.getJava_MethodAccess().getMethod_nameSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_MethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"method_name",
        		lv_method_name_4_0, 
        		"STRING");
	    }

)
)(	otherlv_5='params' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJava_MethodAccess().getParamsKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_MethodRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getJava_MethodAccess().getParamsJava_ClassCrossReference_5_1_0()); 
	}

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJava_MethodAccess().getCommaKeyword_5_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_MethodRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getJava_MethodAccess().getParamsJava_ClassCrossReference_5_2_1_0()); 
	}

)
))*)?	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getJava_MethodAccess().getRightCurlyBracketKeyword_6());
    }
)
;







// Entry rule entryRuleJava_Field
entryRuleJava_Field returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJava_FieldRule()); }
	 iv_ruleJava_Field=ruleJava_Field 
	 { $current=$iv_ruleJava_Field.current; } 
	 EOF 
;

// Rule Java_Field
ruleJava_Field returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='field' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJava_FieldAccess().getFieldKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getJava_FieldAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_FieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJava_FieldAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='name' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJava_FieldAccess().getNameKeyword_3());
    }
(
(
		lv_field_name_4_0=RULE_STRING
		{
			newLeafNode(lv_field_name_4_0, grammarAccess.getJava_FieldAccess().getField_nameSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_FieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"field_name",
        		lv_field_name_4_0, 
        		"STRING");
	    }

)
)	otherlv_5='type' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJava_FieldAccess().getTypeKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJava_FieldRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getJava_FieldAccess().getTypeJava_ClassCrossReference_6_0()); 
	}

)
)	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJava_FieldAccess().getRightCurlyBracketKeyword_7());
    }
)
;







// Entry rule entryRuleTest_Case
entryRuleTest_Case returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTest_CaseRule()); }
	 iv_ruleTest_Case=ruleTest_Case 
	 { $current=$iv_ruleTest_Case.current; } 
	 EOF 
;

// Rule Test_Case
ruleTest_Case returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTest_CaseAccess().getCaseKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTest_CaseAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTest_CaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTest_CaseAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='description' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTest_CaseAccess().getDescriptionKeyword_3());
    }
(
(
		lv_description_4_0=RULE_STRING
		{
			newLeafNode(lv_description_4_0, grammarAccess.getTest_CaseAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTest_CaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_4_0, 
        		"STRING");
	    }

)
)	otherlv_5='program' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTest_CaseAccess().getProgramKeyword_5());
    }
(
(
		lv_java_program_6_0=RULE_STRING
		{
			newLeafNode(lv_java_program_6_0, grammarAccess.getTest_CaseAccess().getJava_programSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTest_CaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"java_program",
        		lv_java_program_6_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTest_CaseAccess().getTest_flowTest_FlowParserRuleCall_7_0()); 
	    }
		lv_test_flow_7_0=ruleTest_Flow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTest_CaseRule());
	        }
       		set(
       			$current, 
       			"test_flow",
        		lv_test_flow_7_0, 
        		"Test_Flow");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTest_CaseAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleRefactoring_Instance
entryRuleRefactoring_Instance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefactoring_InstanceRule()); }
	 iv_ruleRefactoring_Instance=ruleRefactoring_Instance 
	 { $current=$iv_ruleRefactoring_Instance.current; } 
	 EOF 
;

// Rule Refactoring_Instance
ruleRefactoring_Instance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRefactoring_InstanceAccess().getPull_Up_RefactoringParserRuleCall_0()); 
    }
    this_Pull_Up_Refactoring_0=rulePull_Up_Refactoring
    { 
        $current = $this_Pull_Up_Refactoring_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRefactoring_InstanceAccess().getCreate_Superclass_RefactoringParserRuleCall_1()); 
    }
    this_Create_Superclass_Refactoring_1=ruleCreate_Superclass_Refactoring
    { 
        $current = $this_Create_Superclass_Refactoring_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRulePull_Up_Refactoring
entryRulePull_Up_Refactoring returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPull_Up_RefactoringRule()); }
	 iv_rulePull_Up_Refactoring=rulePull_Up_Refactoring 
	 { $current=$iv_rulePull_Up_Refactoring.current; } 
	 EOF 
;

// Rule Pull_Up_Refactoring
rulePull_Up_Refactoring returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pullup_method' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPull_Up_RefactoringAccess().getPullup_methodKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPull_Up_RefactoringAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPull_Up_RefactoringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPull_Up_RefactoringAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='parent' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPull_Up_RefactoringAccess().getParentKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPull_Up_RefactoringRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getPull_Up_RefactoringAccess().getParentJava_ClassCrossReference_4_0()); 
	}

)
)	otherlv_5='method' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPull_Up_RefactoringAccess().getMethodKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPull_Up_RefactoringRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getPull_Up_RefactoringAccess().getMethodJava_MethodCrossReference_6_0()); 
	}

)
)	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPull_Up_RefactoringAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleCreate_Superclass_Refactoring
entryRuleCreate_Superclass_Refactoring returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreate_Superclass_RefactoringRule()); }
	 iv_ruleCreate_Superclass_Refactoring=ruleCreate_Superclass_Refactoring 
	 { $current=$iv_ruleCreate_Superclass_Refactoring.current; } 
	 EOF 
;

// Rule Create_Superclass_Refactoring
ruleCreate_Superclass_Refactoring returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='create_superclass' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCreate_Superclass_RefactoringAccess().getCreate_superclassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCreate_Superclass_RefactoringAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCreate_Superclass_RefactoringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCreate_Superclass_RefactoringAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='child' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCreate_Superclass_RefactoringAccess().getChildKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCreate_Superclass_RefactoringRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getCreate_Superclass_RefactoringAccess().getChildClassesCrossReference_4_0()); 
	}

)
)	otherlv_5='target' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCreate_Superclass_RefactoringAccess().getTargetKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCreate_Superclass_RefactoringRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getCreate_Superclass_RefactoringAccess().getTargetJava_ClassCrossReference_6_0()); 
	}

)
)	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCreate_Superclass_RefactoringAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleTest_Flow
entryRuleTest_Flow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTest_FlowRule()); }
	 iv_ruleTest_Flow=ruleTest_Flow 
	 { $current=$iv_ruleTest_Flow.current; } 
	 EOF 
;

// Rule Test_Flow
ruleTest_Flow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='testflow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTest_FlowAccess().getTestflowKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTest_FlowAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTest_FlowAccess().getStepTest_Step_ElementParserRuleCall_2_0()); 
	    }
		lv_step_2_0=ruleTest_Step_Element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTest_FlowRule());
	        }
       		add(
       			$current, 
       			"step",
        		lv_step_2_0, 
        		"Test_Step_Element");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTest_FlowAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTest_Step
entryRuleTest_Step returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTest_StepRule()); }
	 iv_ruleTest_Step=ruleTest_Step 
	 { $current=$iv_ruleTest_Step.current; } 
	 EOF 
;

// Rule Test_Step
ruleTest_Step returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='step' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTest_StepAccess().getStepKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTest_StepAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTest_StepAccess().getElementsTest_Step_ElementParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleTest_Step_Element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTest_StepRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Test_Step_Element");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTest_StepAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTest_Step_Element
entryRuleTest_Step_Element returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTest_Step_ElementRule()); }
	 iv_ruleTest_Step_Element=ruleTest_Step_Element 
	 { $current=$iv_ruleTest_Step_Element.current; } 
	 EOF 
;

// Rule Test_Step_Element
ruleTest_Step_Element returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTest_Step_ElementAccess().getAssertionParserRuleCall_0()); 
    }
    this_Assertion_0=ruleAssertion
    { 
        $current = $this_Assertion_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTest_Step_ElementAccess().getContainmentParserRuleCall_1()); 
    }
    this_Containment_1=ruleContainment
    { 
        $current = $this_Containment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTest_Step_ElementAccess().getTest_StepParserRuleCall_2()); 
    }
    this_Test_Step_2=ruleTest_Step
    { 
        $current = $this_Test_Step_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTest_Step_ElementAccess().getCompileParserRuleCall_3()); 
    }
    this_Compile_3=ruleCompile
    { 
        $current = $this_Compile_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTest_Step_ElementAccess().getSynchronizeParserRuleCall_4()); 
    }
    this_Synchronize_4=ruleSynchronize
    { 
        $current = $this_Synchronize_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTest_Step_ElementAccess().getConditionParserRuleCall_5()); 
    }
    this_Condition_5=ruleCondition
    { 
        $current = $this_Condition_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTest_Step_ElementAccess().getImplementationParserRuleCall_6()); 
    }
    this_Implementation_6=ruleImplementation
    { 
        $current = $this_Implementation_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	 iv_ruleAssertion=ruleAssertion 
	 { $current=$iv_ruleAssertion.current; } 
	 EOF 
;

// Rule Assertion
ruleAssertion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssertionAccess().getAssert_FalseParserRuleCall_0()); 
    }
    this_Assert_False_0=ruleAssert_False
    { 
        $current = $this_Assert_False_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssertionAccess().getAssert_TrueParserRuleCall_1()); 
    }
    this_Assert_True_1=ruleAssert_True
    { 
        $current = $this_Assert_True_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssert_False
entryRuleAssert_False returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssert_FalseRule()); }
	 iv_ruleAssert_False=ruleAssert_False 
	 { $current=$iv_ruleAssert_False.current; } 
	 EOF 
;

// Rule Assert_False
ruleAssert_False returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assertFalse' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssert_FalseAccess().getAssertFalseKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssert_FalseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssert_FalseRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAssert_FalseAccess().getInputRefactoringCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssert_FalseAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAssert_True
entryRuleAssert_True returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssert_TrueRule()); }
	 iv_ruleAssert_True=ruleAssert_True 
	 { $current=$iv_ruleAssert_True.current; } 
	 EOF 
;

// Rule Assert_True
ruleAssert_True returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assertTrue' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssert_TrueAccess().getAssertTrueKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssert_TrueAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssert_TrueRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAssert_TrueAccess().getInputRefactoringCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssert_TrueAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getExpect_TrueParserRuleCall_0()); 
    }
    this_Expect_True_0=ruleExpect_True
    { 
        $current = $this_Expect_True_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getExpect_FalseParserRuleCall_1()); 
    }
    this_Expect_False_1=ruleExpect_False
    { 
        $current = $this_Expect_False_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpect_True
entryRuleExpect_True returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpect_TrueRule()); }
	 iv_ruleExpect_True=ruleExpect_True 
	 { $current=$iv_ruleExpect_True.current; } 
	 EOF 
;

// Rule Expect_True
ruleExpect_True returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='expectTrue' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpect_TrueAccess().getExpectTrueKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpect_TrueAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpect_TrueRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getExpect_TrueAccess().getRefactoringRefactoringCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpect_TrueAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpect_TrueAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpect_TrueAccess().getTrue_stepsTest_Step_ElementParserRuleCall_5_0()); 
	    }
		lv_true_steps_5_0=ruleTest_Step_Element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpect_TrueRule());
	        }
       		add(
       			$current, 
       			"true_steps",
        		lv_true_steps_5_0, 
        		"Test_Step_Element");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExpect_TrueAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_7='else' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpect_TrueAccess().getElseKeyword_7());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpect_TrueAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpect_TrueAccess().getWarningWarningParserRuleCall_9_0()); 
	    }
		lv_warning_9_0=ruleWarning		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpect_TrueRule());
	        }
       		set(
       			$current, 
       			"warning",
        		lv_warning_9_0, 
        		"Warning");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpect_TrueAccess().getFalse_stepsTest_Step_ElementParserRuleCall_10_0()); 
	    }
		lv_false_steps_10_0=ruleTest_Step_Element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpect_TrueRule());
	        }
       		add(
       			$current, 
       			"false_steps",
        		lv_false_steps_10_0, 
        		"Test_Step_Element");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getExpect_TrueAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleExpect_False
entryRuleExpect_False returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpect_FalseRule()); }
	 iv_ruleExpect_False=ruleExpect_False 
	 { $current=$iv_ruleExpect_False.current; } 
	 EOF 
;

// Rule Expect_False
ruleExpect_False returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='expectFalse' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpect_FalseAccess().getExpectFalseKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpect_FalseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpect_FalseRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getExpect_FalseAccess().getRefactoringRefactoringCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpect_FalseAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpect_FalseAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpect_FalseAccess().getFalse_stepsTest_Step_ElementParserRuleCall_5_0()); 
	    }
		lv_false_steps_5_0=ruleTest_Step_Element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpect_FalseRule());
	        }
       		add(
       			$current, 
       			"false_steps",
        		lv_false_steps_5_0, 
        		"Test_Step_Element");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExpect_FalseAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_7='else' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpect_FalseAccess().getElseKeyword_7());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpect_FalseAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpect_FalseAccess().getWarningWarningParserRuleCall_9_0()); 
	    }
		lv_warning_9_0=ruleWarning		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpect_FalseRule());
	        }
       		set(
       			$current, 
       			"warning",
        		lv_warning_9_0, 
        		"Warning");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpect_FalseAccess().getTrue_stepsTest_Step_ElementParserRuleCall_10_0()); 
	    }
		lv_true_steps_10_0=ruleTest_Step_Element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpect_FalseRule());
	        }
       		add(
       			$current, 
       			"true_steps",
        		lv_true_steps_10_0, 
        		"Test_Step_Element");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getExpect_FalseAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleWarning
entryRuleWarning returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWarningRule()); }
	 iv_ruleWarning=ruleWarning 
	 { $current=$iv_ruleWarning.current; } 
	 EOF 
;

// Rule Warning
ruleWarning returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='warning' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWarningAccess().getWarningKeyword_0());
    }
(
(
		lv_message_1_0=RULE_STRING
		{
			newLeafNode(lv_message_1_0, grammarAccess.getWarningAccess().getMessageSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWarningRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"message",
        		lv_message_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleCompile
entryRuleCompile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompileRule()); }
	 iv_ruleCompile=ruleCompile 
	 { $current=$iv_ruleCompile.current; } 
	 EOF 
;

// Rule Compile
ruleCompile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompileAccess().getCompileAction_0(),
            $current);
    }
)	otherlv_1='compile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCompileAccess().getCompileKeyword_1());
    }
)
;





// Entry rule entryRuleSynchronize
entryRuleSynchronize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSynchronizeRule()); }
	 iv_ruleSynchronize=ruleSynchronize 
	 { $current=$iv_ruleSynchronize.current; } 
	 EOF 
;

// Rule Synchronize
ruleSynchronize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSynchronizeAccess().getSynchronizeAction_0(),
            $current);
    }
)	otherlv_1='synchronize' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSynchronizeAccess().getSynchronizeKeyword_1());
    }
)
;





// Entry rule entryRuleNo_Refactoring
entryRuleNo_Refactoring returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNo_RefactoringRule()); }
	 iv_ruleNo_Refactoring=ruleNo_Refactoring 
	 { $current=$iv_ruleNo_Refactoring.current; } 
	 EOF 
;

// Rule No_Refactoring
ruleNo_Refactoring returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNo_RefactoringAccess().getNo_RefactoringAction_0(),
            $current);
    }
)	otherlv_1='none' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNo_RefactoringAccess().getNoneKeyword_1());
    }
)
;







// Entry rule entryRulePropose_Pullup_Method_Refactoring
entryRulePropose_Pullup_Method_Refactoring returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropose_Pullup_Method_RefactoringRule()); }
	 iv_rulePropose_Pullup_Method_Refactoring=rulePropose_Pullup_Method_Refactoring 
	 { $current=$iv_rulePropose_Pullup_Method_Refactoring.current; } 
	 EOF 
;

// Rule Propose_Pullup_Method_Refactoring
rulePropose_Pullup_Method_Refactoring returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='proposePullUpRefactoring' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropose_Pullup_Method_RefactoringAccess().getProposePullUpRefactoringKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropose_Pullup_Method_RefactoringAccess().getLeftParenthesisKeyword_1());
    }
(
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropose_Pullup_Method_RefactoringRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getPropose_Pullup_Method_RefactoringAccess().getRefactoringPull_Up_RefactoringCrossReference_2_0_0()); 
	}

    |		{ 
	        newCompositeNode(grammarAccess.getPropose_Pullup_Method_RefactoringAccess().getRefactoringNo_RefactoringParserRuleCall_2_0_1()); 
	    }
		lv_refactoring_2_4=ruleNo_Refactoring		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropose_Pullup_Method_RefactoringRule());
	        }
       		set(
       			$current, 
       			"refactoring",
        		lv_refactoring_2_4, 
        		"No_Refactoring");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropose_Pullup_Method_RefactoringAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRulePropose_Create_Superclass_Refactoring
entryRulePropose_Create_Superclass_Refactoring returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropose_Create_Superclass_RefactoringRule()); }
	 iv_rulePropose_Create_Superclass_Refactoring=rulePropose_Create_Superclass_Refactoring 
	 { $current=$iv_rulePropose_Create_Superclass_Refactoring.current; } 
	 EOF 
;

// Rule Propose_Create_Superclass_Refactoring
rulePropose_Create_Superclass_Refactoring returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='proposeCreateSuperclassRefactoring' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropose_Create_Superclass_RefactoringAccess().getProposeCreateSuperclassRefactoringKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropose_Create_Superclass_RefactoringAccess().getLeftParenthesisKeyword_1());
    }
(
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropose_Create_Superclass_RefactoringRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getPropose_Create_Superclass_RefactoringAccess().getRefactoringCreate_Superclass_RefactoringCrossReference_2_0_0()); 
	}

    |		{ 
	        newCompositeNode(grammarAccess.getPropose_Create_Superclass_RefactoringAccess().getRefactoringNo_RefactoringParserRuleCall_2_0_1()); 
	    }
		lv_refactoring_2_4=ruleNo_Refactoring		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropose_Create_Superclass_RefactoringRule());
	        }
       		set(
       			$current, 
       			"refactoring",
        		lv_refactoring_2_4, 
        		"No_Refactoring");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropose_Create_Superclass_RefactoringAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleContainment
entryRuleContainment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainmentRule()); }
	 iv_ruleContainment=ruleContainment 
	 { $current=$iv_ruleContainment.current; } 
	 EOF 
;

// Rule Containment
ruleContainment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getContainmentAccess().getContainsParserRuleCall_0()); 
    }
    this_Contains_0=ruleContains
    { 
        $current = $this_Contains_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getContainmentAccess().getContains_NotParserRuleCall_1()); 
    }
    this_Contains_Not_1=ruleContains_Not
    { 
        $current = $this_Contains_Not_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleContains
entryRuleContains returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainsRule()); }
	 iv_ruleContains=ruleContains 
	 { $current=$iv_ruleContains.current; } 
	 EOF 
;

// Rule Contains
ruleContains returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainsRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContainsAccess().getClassJava_ClassCrossReference_0_0()); 
	}

)
)	otherlv_1='contains' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainsAccess().getContainsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainsRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getContainsAccess().getContainsClass_ElementCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleContains_Not
entryRuleContains_Not returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContains_NotRule()); }
	 iv_ruleContains_Not=ruleContains_Not 
	 { $current=$iv_ruleContains_Not.current; } 
	 EOF 
;

// Rule Contains_Not
ruleContains_Not returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContains_NotRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContains_NotAccess().getClassJava_ClassCrossReference_0_0()); 
	}

)
)	otherlv_1='~contains' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContains_NotAccess().getContainsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContains_NotRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getContains_NotAccess().getContainsClass_ElementCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleImplementation
entryRuleImplementation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementationRule()); }
	 iv_ruleImplementation=ruleImplementation 
	 { $current=$iv_ruleImplementation.current; } 
	 EOF 
;

// Rule Implementation
ruleImplementation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImplementationAccess().getImplementsParserRuleCall_0()); 
    }
    this_Implements_0=ruleImplements
    { 
        $current = $this_Implements_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplementationAccess().getImplements_NotParserRuleCall_1()); 
    }
    this_Implements_Not_1=ruleImplements_Not
    { 
        $current = $this_Implements_Not_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleImplements
entryRuleImplements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementsRule()); }
	 iv_ruleImplements=ruleImplements 
	 { $current=$iv_ruleImplements.current; } 
	 EOF 
;

// Rule Implements
ruleImplements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplementsRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getImplementsAccess().getChildJava_ClassCrossReference_0_0()); 
	}

)
)	otherlv_1='extends' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImplementsAccess().getExtendsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplementsRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getImplementsAccess().getParentJava_ClassCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleImplements_Not
entryRuleImplements_Not returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplements_NotRule()); }
	 iv_ruleImplements_Not=ruleImplements_Not 
	 { $current=$iv_ruleImplements_Not.current; } 
	 EOF 
;

// Rule Implements_Not
ruleImplements_Not returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplements_NotRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getImplements_NotAccess().getChildJava_ClassCrossReference_0_0()); 
	}

)
)	otherlv_1='~extends' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImplements_NotAccess().getExtendsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplements_NotRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getImplements_NotAccess().getParentJava_ClassCrossReference_2_0()); 
	}

)
))
;





RULE_BOOLEAN : ('true'|'false');

RULE_FLOAT : RULE_INT '.' RULE_INT 'd'?;

RULE_DOUBLE : RULE_INT '.' RULE_INT 'f';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' (' '..'~')* '"';

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


