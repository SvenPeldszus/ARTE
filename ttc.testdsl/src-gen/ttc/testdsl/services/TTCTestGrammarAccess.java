/*
 * generated by Xtext
 */
package ttc.testdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TTCTestGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class Test_FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test_File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTest_casesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTest_casesTest_CaseParserRuleCall_3_0_0 = (RuleCall)cTest_casesAssignment_3_0.eContents().get(0);
		private final Assignment cJava_classAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cJava_classJava_ClassParserRuleCall_3_1_0 = (RuleCall)cJava_classAssignment_3_1.eContents().get(0);
		private final Assignment cJava_classesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cJava_classesClassesParserRuleCall_3_2_0 = (RuleCall)cJava_classesAssignment_3_2.eContents().get(0);
		private final Assignment cJava_methodAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cJava_methodJava_MethodParserRuleCall_3_3_0 = (RuleCall)cJava_methodAssignment_3_3.eContents().get(0);
		private final Assignment cRefactoringsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cRefactoringsRefactoring_InstanceParserRuleCall_3_4_0 = (RuleCall)cRefactoringsAssignment_3_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Test_File:
		//	"TestFile" name=ID "{" (test_cases+=Test_Case //(java_methods += Methods) |
		//	//(java_field   += Java_Field) |
		//	//(java_fields  += Fields) |
		//	| java_class+=Java_Class | java_classes+=Classes | java_method+=Java_Method | refactorings+=Refactoring_Instance)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"TestFile" name=ID "{" (test_cases+=Test_Case //(java_methods += Methods) |
		////(java_field   += Java_Field) |
		////(java_fields  += Fields) |
		//| java_class+=Java_Class | java_classes+=Classes | java_method+=Java_Method | refactorings+=Refactoring_Instance)* "}"
		public Group getGroup() { return cGroup; }

		//"TestFile"
		public Keyword getTestFileKeyword_0() { return cTestFileKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(test_cases+=Test_Case //(java_methods += Methods) |
		////(java_field   += Java_Field) |
		////(java_fields  += Fields) |
		//| java_class+=Java_Class | java_classes+=Classes | java_method+=Java_Method | refactorings+=Refactoring_Instance)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//test_cases+=Test_Case
		public Assignment getTest_casesAssignment_3_0() { return cTest_casesAssignment_3_0; }

		//Test_Case
		public RuleCall getTest_casesTest_CaseParserRuleCall_3_0_0() { return cTest_casesTest_CaseParserRuleCall_3_0_0; }

		//java_class+=Java_Class
		public Assignment getJava_classAssignment_3_1() { return cJava_classAssignment_3_1; }

		//Java_Class
		public RuleCall getJava_classJava_ClassParserRuleCall_3_1_0() { return cJava_classJava_ClassParserRuleCall_3_1_0; }

		//java_classes+=Classes
		public Assignment getJava_classesAssignment_3_2() { return cJava_classesAssignment_3_2; }

		//Classes
		public RuleCall getJava_classesClassesParserRuleCall_3_2_0() { return cJava_classesClassesParserRuleCall_3_2_0; }

		//java_method+=Java_Method
		public Assignment getJava_methodAssignment_3_3() { return cJava_methodAssignment_3_3; }

		//Java_Method
		public RuleCall getJava_methodJava_MethodParserRuleCall_3_3_0() { return cJava_methodJava_MethodParserRuleCall_3_3_0; }

		//refactorings+=Refactoring_Instance
		public Assignment getRefactoringsAssignment_3_4() { return cRefactoringsAssignment_3_4; }

		//Refactoring_Instance
		public RuleCall getRefactoringsRefactoring_InstanceParserRuleCall_3_4_0() { return cRefactoringsRefactoring_InstanceParserRuleCall_3_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Java_ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Java_Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPackageKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPackageAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPackageSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cPackageAssignment_3_1.eContents().get(0);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClass_nameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClass_nameSTRINGTerminalRuleCall_5_0 = (RuleCall)cClass_nameAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Java_Class:
		//	"class" name=ID "{" ("package" package=STRING)? "name" class_name=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"class" name=ID "{" ("package" package=STRING)? "name" class_name=STRING "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("package" package=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"package"
		public Keyword getPackageKeyword_3_0() { return cPackageKeyword_3_0; }

		//package=STRING
		public Assignment getPackageAssignment_3_1() { return cPackageAssignment_3_1; }

		//STRING
		public RuleCall getPackageSTRINGTerminalRuleCall_3_1_0() { return cPackageSTRINGTerminalRuleCall_3_1_0; }

		//"name"
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }

		//class_name=STRING
		public Assignment getClass_nameAssignment_5() { return cClass_nameAssignment_5; }

		//STRING
		public RuleCall getClass_nameSTRINGTerminalRuleCall_5_0() { return cClass_nameSTRINGTerminalRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClassesJava_ClassCrossReference_3_0 = (CrossReference)cClassesAssignment_3.eContents().get(0);
		private final RuleCall cClassesJava_ClassIDTerminalRuleCall_3_0_1 = (RuleCall)cClassesJava_ClassCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClassesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cClassesJava_ClassCrossReference_4_1_0 = (CrossReference)cClassesAssignment_4_1.eContents().get(0);
		private final RuleCall cClassesJava_ClassIDTerminalRuleCall_4_1_0_1 = (RuleCall)cClassesJava_ClassCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Classes:
		//	"classes" name=ID "{" classes+=[Java_Class] ("," classes+=[Java_Class])* "}";
		@Override public ParserRule getRule() { return rule; }

		//"classes" name=ID "{" classes+=[Java_Class] ("," classes+=[Java_Class])* "}"
		public Group getGroup() { return cGroup; }

		//"classes"
		public Keyword getClassesKeyword_0() { return cClassesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//classes+=[Java_Class]
		public Assignment getClassesAssignment_3() { return cClassesAssignment_3; }

		//[Java_Class]
		public CrossReference getClassesJava_ClassCrossReference_3_0() { return cClassesJava_ClassCrossReference_3_0; }

		//ID
		public RuleCall getClassesJava_ClassIDTerminalRuleCall_3_0_1() { return cClassesJava_ClassIDTerminalRuleCall_3_0_1; }

		//("," classes+=[Java_Class])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//classes+=[Java_Class]
		public Assignment getClassesAssignment_4_1() { return cClassesAssignment_4_1; }

		//[Java_Class]
		public CrossReference getClassesJava_ClassCrossReference_4_1_0() { return cClassesJava_ClassCrossReference_4_1_0; }

		//ID
		public RuleCall getClassesJava_ClassIDTerminalRuleCall_4_1_0_1() { return cClassesJava_ClassIDTerminalRuleCall_4_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Java_MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Java_Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMethod_nameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethod_nameSTRINGTerminalRuleCall_4_0 = (RuleCall)cMethod_nameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cParamsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParamsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cParamsJava_ClassCrossReference_5_1_0 = (CrossReference)cParamsAssignment_5_1.eContents().get(0);
		private final RuleCall cParamsJava_ClassIDTerminalRuleCall_5_1_0_1 = (RuleCall)cParamsJava_ClassCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cParamsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cParamsJava_ClassCrossReference_5_2_1_0 = (CrossReference)cParamsAssignment_5_2_1.eContents().get(0);
		private final RuleCall cParamsJava_ClassIDTerminalRuleCall_5_2_1_0_1 = (RuleCall)cParamsJava_ClassCrossReference_5_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Java_Method:
		//	"method" name=ID "{" "name" method_name=STRING ("params" params+=[Java_Class] ("," params+=[Java_Class])*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"method" name=ID "{" "name" method_name=STRING ("params" params+=[Java_Class] ("," params+=[Java_Class])*)? "}"
		public Group getGroup() { return cGroup; }

		//"method"
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"name"
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }

		//method_name=STRING
		public Assignment getMethod_nameAssignment_4() { return cMethod_nameAssignment_4; }

		//STRING
		public RuleCall getMethod_nameSTRINGTerminalRuleCall_4_0() { return cMethod_nameSTRINGTerminalRuleCall_4_0; }

		//("params" params+=[Java_Class] ("," params+=[Java_Class])*)?
		public Group getGroup_5() { return cGroup_5; }

		//"params"
		public Keyword getParamsKeyword_5_0() { return cParamsKeyword_5_0; }

		//params+=[Java_Class]
		public Assignment getParamsAssignment_5_1() { return cParamsAssignment_5_1; }

		//[Java_Class]
		public CrossReference getParamsJava_ClassCrossReference_5_1_0() { return cParamsJava_ClassCrossReference_5_1_0; }

		//ID
		public RuleCall getParamsJava_ClassIDTerminalRuleCall_5_1_0_1() { return cParamsJava_ClassIDTerminalRuleCall_5_1_0_1; }

		//("," params+=[Java_Class])*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//params+=[Java_Class]
		public Assignment getParamsAssignment_5_2_1() { return cParamsAssignment_5_2_1; }

		//[Java_Class]
		public CrossReference getParamsJava_ClassCrossReference_5_2_1_0() { return cParamsJava_ClassCrossReference_5_2_1_0; }

		//ID
		public RuleCall getParamsJava_ClassIDTerminalRuleCall_5_2_1_0_1() { return cParamsJava_ClassIDTerminalRuleCall_5_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Methods");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMethodsJava_MethodCrossReference_3_0 = (CrossReference)cMethodsAssignment_3.eContents().get(0);
		private final RuleCall cMethodsJava_MethodIDTerminalRuleCall_3_0_1 = (RuleCall)cMethodsJava_MethodCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Methods:
		//	"methods" name=ID "{" methods+=[Java_Method]* "}";
		@Override public ParserRule getRule() { return rule; }

		//"methods" name=ID "{" methods+=[Java_Method]* "}"
		public Group getGroup() { return cGroup; }

		//"methods"
		public Keyword getMethodsKeyword_0() { return cMethodsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//methods+=[Java_Method]*
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }

		//[Java_Method]
		public CrossReference getMethodsJava_MethodCrossReference_3_0() { return cMethodsJava_MethodCrossReference_3_0; }

		//ID
		public RuleCall getMethodsJava_MethodIDTerminalRuleCall_3_0_1() { return cMethodsJava_MethodIDTerminalRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Java_FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Java_Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cField_nameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cField_nameSTRINGTerminalRuleCall_4_0 = (RuleCall)cField_nameAssignment_4.eContents().get(0);
		private final Keyword cTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeJava_ClassCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeJava_ClassIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeJava_ClassCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Java_Field:
		//	"field" name=ID "{" "name" field_name=STRING "type" type=[Java_Class] "}";
		@Override public ParserRule getRule() { return rule; }

		//"field" name=ID "{" "name" field_name=STRING "type" type=[Java_Class] "}"
		public Group getGroup() { return cGroup; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"name"
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }

		//field_name=STRING
		public Assignment getField_nameAssignment_4() { return cField_nameAssignment_4; }

		//STRING
		public RuleCall getField_nameSTRINGTerminalRuleCall_4_0() { return cField_nameSTRINGTerminalRuleCall_4_0; }

		//"type"
		public Keyword getTypeKeyword_5() { return cTypeKeyword_5; }

		//type=[Java_Class]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//[Java_Class]
		public CrossReference getTypeJava_ClassCrossReference_6_0() { return cTypeJava_ClassCrossReference_6_0; }

		//ID
		public RuleCall getTypeJava_ClassIDTerminalRuleCall_6_0_1() { return cTypeJava_ClassIDTerminalRuleCall_6_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class FieldsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fields");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFieldsJava_FieldCrossReference_3_0 = (CrossReference)cFieldsAssignment_3.eContents().get(0);
		private final RuleCall cFieldsJava_FieldIDTerminalRuleCall_3_0_1 = (RuleCall)cFieldsJava_FieldCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Fields:
		//	"fields" name=ID "{" fields+=[Java_Field]* "}";
		@Override public ParserRule getRule() { return rule; }

		//"fields" name=ID "{" fields+=[Java_Field]* "}"
		public Group getGroup() { return cGroup; }

		//"fields"
		public Keyword getFieldsKeyword_0() { return cFieldsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=[Java_Field]*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//[Java_Field]
		public CrossReference getFieldsJava_FieldCrossReference_3_0() { return cFieldsJava_FieldCrossReference_3_0; }

		//ID
		public RuleCall getFieldsJava_FieldIDTerminalRuleCall_3_0_1() { return cFieldsJava_FieldIDTerminalRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Test_CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test_Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cProgramKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cJava_programAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cJava_programSTRINGTerminalRuleCall_6_0 = (RuleCall)cJava_programAssignment_6.eContents().get(0);
		private final Assignment cTest_flowAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTest_flowTest_FlowParserRuleCall_7_0 = (RuleCall)cTest_flowAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Test_Case:
		//	"case" name=ID "{" "description" description=STRING "program" java_program=STRING test_flow=Test_Flow "}";
		@Override public ParserRule getRule() { return rule; }

		//"case" name=ID "{" "description" description=STRING "program" java_program=STRING test_flow=Test_Flow "}"
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"description"
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }

		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//"program"
		public Keyword getProgramKeyword_5() { return cProgramKeyword_5; }

		//java_program=STRING
		public Assignment getJava_programAssignment_6() { return cJava_programAssignment_6; }

		//STRING
		public RuleCall getJava_programSTRINGTerminalRuleCall_6_0() { return cJava_programSTRINGTerminalRuleCall_6_0; }

		//test_flow=Test_Flow
		public Assignment getTest_flowAssignment_7() { return cTest_flowAssignment_7; }

		//Test_Flow
		public RuleCall getTest_flowTest_FlowParserRuleCall_7_0() { return cTest_flowTest_FlowParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class Refactoring_InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refactoring_Instance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPull_Up_RefactoringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreate_Superclass_RefactoringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Refactoring_Instance:
		//	Pull_Up_Refactoring | Create_Superclass_Refactoring;
		@Override public ParserRule getRule() { return rule; }

		//Pull_Up_Refactoring | Create_Superclass_Refactoring
		public Alternatives getAlternatives() { return cAlternatives; }

		//Pull_Up_Refactoring
		public RuleCall getPull_Up_RefactoringParserRuleCall_0() { return cPull_Up_RefactoringParserRuleCall_0; }

		//Create_Superclass_Refactoring
		public RuleCall getCreate_Superclass_RefactoringParserRuleCall_1() { return cCreate_Superclass_RefactoringParserRuleCall_1; }
	}

	public class RefactoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refactoring");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRefactoring_InstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNo_RefactoringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Refactoring:
		//	Refactoring_Instance | No_Refactoring;
		@Override public ParserRule getRule() { return rule; }

		//Refactoring_Instance | No_Refactoring
		public Alternatives getAlternatives() { return cAlternatives; }

		//Refactoring_Instance
		public RuleCall getRefactoring_InstanceParserRuleCall_0() { return cRefactoring_InstanceParserRuleCall_0; }

		//No_Refactoring
		public RuleCall getNo_RefactoringParserRuleCall_1() { return cNo_RefactoringParserRuleCall_1; }
	}

	public class Pull_Up_RefactoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pull_Up_Refactoring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPullup_methodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cParentKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParentJava_ClassCrossReference_4_0 = (CrossReference)cParentAssignment_4.eContents().get(0);
		private final RuleCall cParentJava_ClassIDTerminalRuleCall_4_0_1 = (RuleCall)cParentJava_ClassCrossReference_4_0.eContents().get(1);
		private final Keyword cMethodKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMethodJava_MethodCrossReference_6_0 = (CrossReference)cMethodAssignment_6.eContents().get(0);
		private final RuleCall cMethodJava_MethodIDTerminalRuleCall_6_0_1 = (RuleCall)cMethodJava_MethodCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Pull_Up_Refactoring:
		//	"pullup_method" name=ID "{" "parent" parent=[Java_Class] "method" method=[Java_Method] "}";
		@Override public ParserRule getRule() { return rule; }

		//"pullup_method" name=ID "{" "parent" parent=[Java_Class] "method" method=[Java_Method] "}"
		public Group getGroup() { return cGroup; }

		//"pullup_method"
		public Keyword getPullup_methodKeyword_0() { return cPullup_methodKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"parent"
		public Keyword getParentKeyword_3() { return cParentKeyword_3; }

		//parent=[Java_Class]
		public Assignment getParentAssignment_4() { return cParentAssignment_4; }

		//[Java_Class]
		public CrossReference getParentJava_ClassCrossReference_4_0() { return cParentJava_ClassCrossReference_4_0; }

		//ID
		public RuleCall getParentJava_ClassIDTerminalRuleCall_4_0_1() { return cParentJava_ClassIDTerminalRuleCall_4_0_1; }

		//"method"
		public Keyword getMethodKeyword_5() { return cMethodKeyword_5; }

		//method=[Java_Method]
		public Assignment getMethodAssignment_6() { return cMethodAssignment_6; }

		//[Java_Method]
		public CrossReference getMethodJava_MethodCrossReference_6_0() { return cMethodJava_MethodCrossReference_6_0; }

		//ID
		public RuleCall getMethodJava_MethodIDTerminalRuleCall_6_0_1() { return cMethodJava_MethodIDTerminalRuleCall_6_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Create_Superclass_RefactoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Create_Superclass_Refactoring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreate_superclassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cChildKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChildAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cChildClassesCrossReference_4_0 = (CrossReference)cChildAssignment_4.eContents().get(0);
		private final RuleCall cChildClassesIDTerminalRuleCall_4_0_1 = (RuleCall)cChildClassesCrossReference_4_0.eContents().get(1);
		private final Keyword cTargetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetJava_ClassCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetJava_ClassIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetJava_ClassCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Create_Superclass_Refactoring:
		//	"create_superclass" name=ID "{" "child" child=[Classes] "target" target=[Java_Class] "}";
		@Override public ParserRule getRule() { return rule; }

		//"create_superclass" name=ID "{" "child" child=[Classes] "target" target=[Java_Class] "}"
		public Group getGroup() { return cGroup; }

		//"create_superclass"
		public Keyword getCreate_superclassKeyword_0() { return cCreate_superclassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"child"
		public Keyword getChildKeyword_3() { return cChildKeyword_3; }

		//child=[Classes]
		public Assignment getChildAssignment_4() { return cChildAssignment_4; }

		//[Classes]
		public CrossReference getChildClassesCrossReference_4_0() { return cChildClassesCrossReference_4_0; }

		//ID
		public RuleCall getChildClassesIDTerminalRuleCall_4_0_1() { return cChildClassesIDTerminalRuleCall_4_0_1; }

		//"target"
		public Keyword getTargetKeyword_5() { return cTargetKeyword_5; }

		//target=[Java_Class]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }

		//[Java_Class]
		public CrossReference getTargetJava_ClassCrossReference_6_0() { return cTargetJava_ClassCrossReference_6_0; }

		//ID
		public RuleCall getTargetJava_ClassIDTerminalRuleCall_6_0_1() { return cTargetJava_ClassIDTerminalRuleCall_6_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Test_FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test_Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStepAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepTest_Step_ElementParserRuleCall_2_0 = (RuleCall)cStepAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Test_Flow:
		//	"testflow" "{" step+=Test_Step_Element+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"testflow" "{" step+=Test_Step_Element+ "}"
		public Group getGroup() { return cGroup; }

		//"testflow"
		public Keyword getTestflowKeyword_0() { return cTestflowKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//step+=Test_Step_Element+
		public Assignment getStepAssignment_2() { return cStepAssignment_2; }

		//Test_Step_Element
		public RuleCall getStepTest_Step_ElementParserRuleCall_2_0() { return cStepTest_Step_ElementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class Test_StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test_Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsTest_Step_ElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Test_Step:
		//	"step" "{" elements+=Test_Step_Element+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"step" "{" elements+=Test_Step_Element+ "}"
		public Group getGroup() { return cGroup; }

		//"step"
		public Keyword getStepKeyword_0() { return cStepKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=Test_Step_Element+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Test_Step_Element
		public RuleCall getElementsTest_Step_ElementParserRuleCall_2_0() { return cElementsTest_Step_ElementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class Test_Step_ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test_Step_Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssertionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContainmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTest_StepParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSynchronizeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConditionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cImplementationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Test_Step_Element: //Propose_Refactoring | Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation
		//	Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation;
		@Override public ParserRule getRule() { return rule; }

		////Propose_Refactoring | Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation
		//Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation
		public Alternatives getAlternatives() { return cAlternatives; }

		////Propose_Refactoring | Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation
		//Assertion
		public RuleCall getAssertionParserRuleCall_0() { return cAssertionParserRuleCall_0; }

		//Containment
		public RuleCall getContainmentParserRuleCall_1() { return cContainmentParserRuleCall_1; }

		//Test_Step
		public RuleCall getTest_StepParserRuleCall_2() { return cTest_StepParserRuleCall_2; }

		//Compile
		public RuleCall getCompileParserRuleCall_3() { return cCompileParserRuleCall_3; }

		//Synchronize
		public RuleCall getSynchronizeParserRuleCall_4() { return cSynchronizeParserRuleCall_4; }

		//Condition
		public RuleCall getConditionParserRuleCall_5() { return cConditionParserRuleCall_5; }

		//Implementation
		public RuleCall getImplementationParserRuleCall_6() { return cImplementationParserRuleCall_6; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssert_FalseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssert_TrueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Assertion:
		//	Assert_False | Assert_True;
		@Override public ParserRule getRule() { return rule; }

		//Assert_False | Assert_True
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assert_False
		public RuleCall getAssert_FalseParserRuleCall_0() { return cAssert_FalseParserRuleCall_0; }

		//Assert_True
		public RuleCall getAssert_TrueParserRuleCall_1() { return cAssert_TrueParserRuleCall_1; }
	}

	public class Assert_FalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assert_False");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertFalseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInputRefactoringCrossReference_2_0 = (CrossReference)cInputAssignment_2.eContents().get(0);
		private final RuleCall cInputRefactoringIDTerminalRuleCall_2_0_1 = (RuleCall)cInputRefactoringCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assert_False:
		//	"assertFalse" "(" input=[Refactoring] ")";
		@Override public ParserRule getRule() { return rule; }

		//"assertFalse" "(" input=[Refactoring] ")"
		public Group getGroup() { return cGroup; }

		//"assertFalse"
		public Keyword getAssertFalseKeyword_0() { return cAssertFalseKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//input=[Refactoring]
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }

		//[Refactoring]
		public CrossReference getInputRefactoringCrossReference_2_0() { return cInputRefactoringCrossReference_2_0; }

		//ID
		public RuleCall getInputRefactoringIDTerminalRuleCall_2_0_1() { return cInputRefactoringIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Assert_TrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assert_True");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertTrueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInputRefactoringCrossReference_2_0 = (CrossReference)cInputAssignment_2.eContents().get(0);
		private final RuleCall cInputRefactoringIDTerminalRuleCall_2_0_1 = (RuleCall)cInputRefactoringCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assert_True:
		//	"assertTrue" "(" input=[Refactoring] ")";
		@Override public ParserRule getRule() { return rule; }

		//"assertTrue" "(" input=[Refactoring] ")"
		public Group getGroup() { return cGroup; }

		//"assertTrue"
		public Keyword getAssertTrueKeyword_0() { return cAssertTrueKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//input=[Refactoring]
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }

		//[Refactoring]
		public CrossReference getInputRefactoringCrossReference_2_0() { return cInputRefactoringCrossReference_2_0; }

		//ID
		public RuleCall getInputRefactoringIDTerminalRuleCall_2_0_1() { return cInputRefactoringIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpect_TrueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpect_FalseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	Expect_True | Expect_False;
		@Override public ParserRule getRule() { return rule; }

		//Expect_True | Expect_False
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expect_True
		public RuleCall getExpect_TrueParserRuleCall_0() { return cExpect_TrueParserRuleCall_0; }

		//Expect_False
		public RuleCall getExpect_FalseParserRuleCall_1() { return cExpect_FalseParserRuleCall_1; }
	}

	public class Expect_TrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expect_True");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpectTrueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefactoringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefactoringRefactoringCrossReference_2_0 = (CrossReference)cRefactoringAssignment_2.eContents().get(0);
		private final RuleCall cRefactoringRefactoringIDTerminalRuleCall_2_0_1 = (RuleCall)cRefactoringRefactoringCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTrue_stepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTrue_stepsTest_Step_ElementParserRuleCall_5_0 = (RuleCall)cTrue_stepsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cWarningAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cWarningWarningParserRuleCall_9_0 = (RuleCall)cWarningAssignment_9.eContents().get(0);
		private final Assignment cFalse_stepsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cFalse_stepsTest_Step_ElementParserRuleCall_10_0 = (RuleCall)cFalse_stepsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Expect_True:
		//	"expectTrue" "(" refactoring=[Refactoring] ")" "{" true_steps+=Test_Step_Element+ "}" "else" "{" warning=Warning?
		//	false_steps+=Test_Step_Element+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"expectTrue" "(" refactoring=[Refactoring] ")" "{" true_steps+=Test_Step_Element+ "}" "else" "{" warning=Warning?
		//false_steps+=Test_Step_Element+ "}"
		public Group getGroup() { return cGroup; }

		//"expectTrue"
		public Keyword getExpectTrueKeyword_0() { return cExpectTrueKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//refactoring=[Refactoring]
		public Assignment getRefactoringAssignment_2() { return cRefactoringAssignment_2; }

		//[Refactoring]
		public CrossReference getRefactoringRefactoringCrossReference_2_0() { return cRefactoringRefactoringCrossReference_2_0; }

		//ID
		public RuleCall getRefactoringRefactoringIDTerminalRuleCall_2_0_1() { return cRefactoringRefactoringIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//true_steps+=Test_Step_Element+
		public Assignment getTrue_stepsAssignment_5() { return cTrue_stepsAssignment_5; }

		//Test_Step_Element
		public RuleCall getTrue_stepsTest_Step_ElementParserRuleCall_5_0() { return cTrue_stepsTest_Step_ElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"else"
		public Keyword getElseKeyword_7() { return cElseKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//warning=Warning?
		public Assignment getWarningAssignment_9() { return cWarningAssignment_9; }

		//Warning
		public RuleCall getWarningWarningParserRuleCall_9_0() { return cWarningWarningParserRuleCall_9_0; }

		//false_steps+=Test_Step_Element+
		public Assignment getFalse_stepsAssignment_10() { return cFalse_stepsAssignment_10; }

		//Test_Step_Element
		public RuleCall getFalse_stepsTest_Step_ElementParserRuleCall_10_0() { return cFalse_stepsTest_Step_ElementParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class Expect_FalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expect_False");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpectFalseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefactoringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefactoringRefactoringCrossReference_2_0 = (CrossReference)cRefactoringAssignment_2.eContents().get(0);
		private final RuleCall cRefactoringRefactoringIDTerminalRuleCall_2_0_1 = (RuleCall)cRefactoringRefactoringCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFalse_stepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFalse_stepsTest_Step_ElementParserRuleCall_5_0 = (RuleCall)cFalse_stepsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cWarningAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cWarningWarningParserRuleCall_9_0 = (RuleCall)cWarningAssignment_9.eContents().get(0);
		private final Assignment cTrue_stepsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTrue_stepsTest_Step_ElementParserRuleCall_10_0 = (RuleCall)cTrue_stepsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Expect_False:
		//	"expectFalse" "(" refactoring=[Refactoring] ")" "{" false_steps+=Test_Step_Element+ "}" "else" "{" warning=Warning?
		//	true_steps+=Test_Step_Element+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"expectFalse" "(" refactoring=[Refactoring] ")" "{" false_steps+=Test_Step_Element+ "}" "else" "{" warning=Warning?
		//true_steps+=Test_Step_Element+ "}"
		public Group getGroup() { return cGroup; }

		//"expectFalse"
		public Keyword getExpectFalseKeyword_0() { return cExpectFalseKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//refactoring=[Refactoring]
		public Assignment getRefactoringAssignment_2() { return cRefactoringAssignment_2; }

		//[Refactoring]
		public CrossReference getRefactoringRefactoringCrossReference_2_0() { return cRefactoringRefactoringCrossReference_2_0; }

		//ID
		public RuleCall getRefactoringRefactoringIDTerminalRuleCall_2_0_1() { return cRefactoringRefactoringIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//false_steps+=Test_Step_Element+
		public Assignment getFalse_stepsAssignment_5() { return cFalse_stepsAssignment_5; }

		//Test_Step_Element
		public RuleCall getFalse_stepsTest_Step_ElementParserRuleCall_5_0() { return cFalse_stepsTest_Step_ElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"else"
		public Keyword getElseKeyword_7() { return cElseKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//warning=Warning?
		public Assignment getWarningAssignment_9() { return cWarningAssignment_9; }

		//Warning
		public RuleCall getWarningWarningParserRuleCall_9_0() { return cWarningWarningParserRuleCall_9_0; }

		//true_steps+=Test_Step_Element+
		public Assignment getTrue_stepsAssignment_10() { return cTrue_stepsAssignment_10; }

		//Test_Step_Element
		public RuleCall getTrue_stepsTest_Step_ElementParserRuleCall_10_0() { return cTrue_stepsTest_Step_ElementParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class WarningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Warning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWarningKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		
		//Warning:
		//	"warning" message=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"warning" message=STRING
		public Group getGroup() { return cGroup; }

		//"warning"
		public Keyword getWarningKeyword_0() { return cWarningKeyword_0; }

		//message=STRING
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_1_0() { return cMessageSTRINGTerminalRuleCall_1_0; }
	}

	public class CompileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Compile:
		//	{Compile} "compile";
		@Override public ParserRule getRule() { return rule; }

		//{Compile} "compile"
		public Group getGroup() { return cGroup; }

		//{Compile}
		public Action getCompileAction_0() { return cCompileAction_0; }

		//"compile"
		public Keyword getCompileKeyword_1() { return cCompileKeyword_1; }
	}

	public class SynchronizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Synchronize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSynchronizeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSynchronizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Synchronize:
		//	{Synchronize} "synchronize";
		@Override public ParserRule getRule() { return rule; }

		//{Synchronize} "synchronize"
		public Group getGroup() { return cGroup; }

		//{Synchronize}
		public Action getSynchronizeAction_0() { return cSynchronizeAction_0; }

		//"synchronize"
		public Keyword getSynchronizeKeyword_1() { return cSynchronizeKeyword_1; }
	}

	public class No_RefactoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "No_Refactoring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNo_RefactoringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNoneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//No_Refactoring:
		//	{No_Refactoring} "none";
		@Override public ParserRule getRule() { return rule; }

		//{No_Refactoring} "none"
		public Group getGroup() { return cGroup; }

		//{No_Refactoring}
		public Action getNo_RefactoringAction_0() { return cNo_RefactoringAction_0; }

		//"none"
		public Keyword getNoneKeyword_1() { return cNoneKeyword_1; }
	}

	public class Propose_RefactoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Propose_Refactoring");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropose_Pullup_Method_RefactoringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropose_Create_Superclass_RefactoringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Propose_Refactoring:
		//	Propose_Pullup_Method_Refactoring | Propose_Create_Superclass_Refactoring;
		@Override public ParserRule getRule() { return rule; }

		//Propose_Pullup_Method_Refactoring | Propose_Create_Superclass_Refactoring
		public Alternatives getAlternatives() { return cAlternatives; }

		//Propose_Pullup_Method_Refactoring
		public RuleCall getPropose_Pullup_Method_RefactoringParserRuleCall_0() { return cPropose_Pullup_Method_RefactoringParserRuleCall_0; }

		//Propose_Create_Superclass_Refactoring
		public RuleCall getPropose_Create_Superclass_RefactoringParserRuleCall_1() { return cPropose_Create_Superclass_RefactoringParserRuleCall_1; }
	}

	public class Propose_Pullup_Method_RefactoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Propose_Pullup_Method_Refactoring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProposePullUpRefactoringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefactoringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRefactoringAlternatives_2_0 = (Alternatives)cRefactoringAssignment_2.eContents().get(0);
		private final CrossReference cRefactoringPull_Up_RefactoringCrossReference_2_0_0 = (CrossReference)cRefactoringAlternatives_2_0.eContents().get(0);
		private final RuleCall cRefactoringPull_Up_RefactoringIDTerminalRuleCall_2_0_0_1 = (RuleCall)cRefactoringPull_Up_RefactoringCrossReference_2_0_0.eContents().get(1);
		private final RuleCall cRefactoringNo_RefactoringParserRuleCall_2_0_1 = (RuleCall)cRefactoringAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Propose_Pullup_Method_Refactoring:
		//	"proposePullUpRefactoring" "(" refactoring=([Pull_Up_Refactoring] | No_Refactoring) ")";
		@Override public ParserRule getRule() { return rule; }

		//"proposePullUpRefactoring" "(" refactoring=([Pull_Up_Refactoring] | No_Refactoring) ")"
		public Group getGroup() { return cGroup; }

		//"proposePullUpRefactoring"
		public Keyword getProposePullUpRefactoringKeyword_0() { return cProposePullUpRefactoringKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//refactoring=([Pull_Up_Refactoring] | No_Refactoring)
		public Assignment getRefactoringAssignment_2() { return cRefactoringAssignment_2; }

		//([Pull_Up_Refactoring] | No_Refactoring)
		public Alternatives getRefactoringAlternatives_2_0() { return cRefactoringAlternatives_2_0; }

		//[Pull_Up_Refactoring]
		public CrossReference getRefactoringPull_Up_RefactoringCrossReference_2_0_0() { return cRefactoringPull_Up_RefactoringCrossReference_2_0_0; }

		//ID
		public RuleCall getRefactoringPull_Up_RefactoringIDTerminalRuleCall_2_0_0_1() { return cRefactoringPull_Up_RefactoringIDTerminalRuleCall_2_0_0_1; }

		//No_Refactoring
		public RuleCall getRefactoringNo_RefactoringParserRuleCall_2_0_1() { return cRefactoringNo_RefactoringParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Propose_Create_Superclass_RefactoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Propose_Create_Superclass_Refactoring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProposeCreateSuperclassRefactoringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefactoringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRefactoringAlternatives_2_0 = (Alternatives)cRefactoringAssignment_2.eContents().get(0);
		private final CrossReference cRefactoringCreate_Superclass_RefactoringCrossReference_2_0_0 = (CrossReference)cRefactoringAlternatives_2_0.eContents().get(0);
		private final RuleCall cRefactoringCreate_Superclass_RefactoringIDTerminalRuleCall_2_0_0_1 = (RuleCall)cRefactoringCreate_Superclass_RefactoringCrossReference_2_0_0.eContents().get(1);
		private final RuleCall cRefactoringNo_RefactoringParserRuleCall_2_0_1 = (RuleCall)cRefactoringAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Propose_Create_Superclass_Refactoring:
		//	"proposeCreateSuperclassRefactoring" "(" refactoring=([Create_Superclass_Refactoring] | No_Refactoring) ")";
		@Override public ParserRule getRule() { return rule; }

		//"proposeCreateSuperclassRefactoring" "(" refactoring=([Create_Superclass_Refactoring] | No_Refactoring) ")"
		public Group getGroup() { return cGroup; }

		//"proposeCreateSuperclassRefactoring"
		public Keyword getProposeCreateSuperclassRefactoringKeyword_0() { return cProposeCreateSuperclassRefactoringKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//refactoring=([Create_Superclass_Refactoring] | No_Refactoring)
		public Assignment getRefactoringAssignment_2() { return cRefactoringAssignment_2; }

		//([Create_Superclass_Refactoring] | No_Refactoring)
		public Alternatives getRefactoringAlternatives_2_0() { return cRefactoringAlternatives_2_0; }

		//[Create_Superclass_Refactoring]
		public CrossReference getRefactoringCreate_Superclass_RefactoringCrossReference_2_0_0() { return cRefactoringCreate_Superclass_RefactoringCrossReference_2_0_0; }

		//ID
		public RuleCall getRefactoringCreate_Superclass_RefactoringIDTerminalRuleCall_2_0_0_1() { return cRefactoringCreate_Superclass_RefactoringIDTerminalRuleCall_2_0_0_1; }

		//No_Refactoring
		public RuleCall getRefactoringNo_RefactoringParserRuleCall_2_0_1() { return cRefactoringNo_RefactoringParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ContainmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Containment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContains_NotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Containment:
		//	Contains | Contains_Not;
		@Override public ParserRule getRule() { return rule; }

		//Contains | Contains_Not
		public Alternatives getAlternatives() { return cAlternatives; }

		//Contains
		public RuleCall getContainsParserRuleCall_0() { return cContainsParserRuleCall_0; }

		//Contains_Not
		public RuleCall getContains_NotParserRuleCall_1() { return cContains_NotParserRuleCall_1; }
	}

	public class Class_ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJava_FieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJava_MethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Class_Element:
		//	Java_Field | Java_Method;
		@Override public ParserRule getRule() { return rule; }

		//Java_Field | Java_Method
		public Alternatives getAlternatives() { return cAlternatives; }

		//Java_Field
		public RuleCall getJava_FieldParserRuleCall_0() { return cJava_FieldParserRuleCall_0; }

		//Java_Method
		public RuleCall getJava_MethodParserRuleCall_1() { return cJava_MethodParserRuleCall_1; }
	}

	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClassJava_ClassCrossReference_0_0 = (CrossReference)cClassAssignment_0.eContents().get(0);
		private final RuleCall cClassJava_ClassIDTerminalRuleCall_0_0_1 = (RuleCall)cClassJava_ClassCrossReference_0_0.eContents().get(1);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContainsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainsClass_ElementCrossReference_2_0 = (CrossReference)cContainsAssignment_2.eContents().get(0);
		private final RuleCall cContainsClass_ElementIDTerminalRuleCall_2_0_1 = (RuleCall)cContainsClass_ElementCrossReference_2_0.eContents().get(1);
		
		//Contains:
		//	class=[Java_Class] "contains" contains=[Class_Element];
		@Override public ParserRule getRule() { return rule; }

		//class=[Java_Class] "contains" contains=[Class_Element]
		public Group getGroup() { return cGroup; }

		//class=[Java_Class]
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }

		//[Java_Class]
		public CrossReference getClassJava_ClassCrossReference_0_0() { return cClassJava_ClassCrossReference_0_0; }

		//ID
		public RuleCall getClassJava_ClassIDTerminalRuleCall_0_0_1() { return cClassJava_ClassIDTerminalRuleCall_0_0_1; }

		//"contains"
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }

		//contains=[Class_Element]
		public Assignment getContainsAssignment_2() { return cContainsAssignment_2; }

		//[Class_Element]
		public CrossReference getContainsClass_ElementCrossReference_2_0() { return cContainsClass_ElementCrossReference_2_0; }

		//ID
		public RuleCall getContainsClass_ElementIDTerminalRuleCall_2_0_1() { return cContainsClass_ElementIDTerminalRuleCall_2_0_1; }
	}

	public class Contains_NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contains_Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClassJava_ClassCrossReference_0_0 = (CrossReference)cClassAssignment_0.eContents().get(0);
		private final RuleCall cClassJava_ClassIDTerminalRuleCall_0_0_1 = (RuleCall)cClassJava_ClassCrossReference_0_0.eContents().get(1);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContainsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainsClass_ElementCrossReference_2_0 = (CrossReference)cContainsAssignment_2.eContents().get(0);
		private final RuleCall cContainsClass_ElementIDTerminalRuleCall_2_0_1 = (RuleCall)cContainsClass_ElementCrossReference_2_0.eContents().get(1);
		
		//Contains_Not:
		//	class=[Java_Class] "~contains" contains=[Class_Element];
		@Override public ParserRule getRule() { return rule; }

		//class=[Java_Class] "~contains" contains=[Class_Element]
		public Group getGroup() { return cGroup; }

		//class=[Java_Class]
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }

		//[Java_Class]
		public CrossReference getClassJava_ClassCrossReference_0_0() { return cClassJava_ClassCrossReference_0_0; }

		//ID
		public RuleCall getClassJava_ClassIDTerminalRuleCall_0_0_1() { return cClassJava_ClassIDTerminalRuleCall_0_0_1; }

		//"~contains"
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }

		//contains=[Class_Element]
		public Assignment getContainsAssignment_2() { return cContainsAssignment_2; }

		//[Class_Element]
		public CrossReference getContainsClass_ElementCrossReference_2_0() { return cContainsClass_ElementCrossReference_2_0; }

		//ID
		public RuleCall getContainsClass_ElementIDTerminalRuleCall_2_0_1() { return cContainsClass_ElementIDTerminalRuleCall_2_0_1; }
	}

	public class ImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implementation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImplementsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImplements_NotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Implementation:
		//	Implements | Implements_Not;
		@Override public ParserRule getRule() { return rule; }

		//Implements | Implements_Not
		public Alternatives getAlternatives() { return cAlternatives; }

		//Implements
		public RuleCall getImplementsParserRuleCall_0() { return cImplementsParserRuleCall_0; }

		//Implements_Not
		public RuleCall getImplements_NotParserRuleCall_1() { return cImplements_NotParserRuleCall_1; }
	}

	public class ImplementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChildAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cChildJava_ClassCrossReference_0_0 = (CrossReference)cChildAssignment_0.eContents().get(0);
		private final RuleCall cChildJava_ClassIDTerminalRuleCall_0_0_1 = (RuleCall)cChildJava_ClassCrossReference_0_0.eContents().get(1);
		private final Keyword cExtendsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParentJava_ClassCrossReference_2_0 = (CrossReference)cParentAssignment_2.eContents().get(0);
		private final RuleCall cParentJava_ClassIDTerminalRuleCall_2_0_1 = (RuleCall)cParentJava_ClassCrossReference_2_0.eContents().get(1);
		
		//Implements:
		//	child=[Java_Class] "extends" parent=[Java_Class];
		@Override public ParserRule getRule() { return rule; }

		//child=[Java_Class] "extends" parent=[Java_Class]
		public Group getGroup() { return cGroup; }

		//child=[Java_Class]
		public Assignment getChildAssignment_0() { return cChildAssignment_0; }

		//[Java_Class]
		public CrossReference getChildJava_ClassCrossReference_0_0() { return cChildJava_ClassCrossReference_0_0; }

		//ID
		public RuleCall getChildJava_ClassIDTerminalRuleCall_0_0_1() { return cChildJava_ClassIDTerminalRuleCall_0_0_1; }

		//"extends"
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }

		//parent=[Java_Class]
		public Assignment getParentAssignment_2() { return cParentAssignment_2; }

		//[Java_Class]
		public CrossReference getParentJava_ClassCrossReference_2_0() { return cParentJava_ClassCrossReference_2_0; }

		//ID
		public RuleCall getParentJava_ClassIDTerminalRuleCall_2_0_1() { return cParentJava_ClassIDTerminalRuleCall_2_0_1; }
	}

	public class Implements_NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implements_Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChildAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cChildJava_ClassCrossReference_0_0 = (CrossReference)cChildAssignment_0.eContents().get(0);
		private final RuleCall cChildJava_ClassIDTerminalRuleCall_0_0_1 = (RuleCall)cChildJava_ClassCrossReference_0_0.eContents().get(1);
		private final Keyword cExtendsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParentJava_ClassCrossReference_2_0 = (CrossReference)cParentAssignment_2.eContents().get(0);
		private final RuleCall cParentJava_ClassIDTerminalRuleCall_2_0_1 = (RuleCall)cParentJava_ClassCrossReference_2_0.eContents().get(1);
		
		//Implements_Not:
		//	child=[Java_Class] "~extends" parent=[Java_Class];
		@Override public ParserRule getRule() { return rule; }

		//child=[Java_Class] "~extends" parent=[Java_Class]
		public Group getGroup() { return cGroup; }

		//child=[Java_Class]
		public Assignment getChildAssignment_0() { return cChildAssignment_0; }

		//[Java_Class]
		public CrossReference getChildJava_ClassCrossReference_0_0() { return cChildJava_ClassCrossReference_0_0; }

		//ID
		public RuleCall getChildJava_ClassIDTerminalRuleCall_0_0_1() { return cChildJava_ClassIDTerminalRuleCall_0_0_1; }

		//"~extends"
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }

		//parent=[Java_Class]
		public Assignment getParentAssignment_2() { return cParentAssignment_2; }

		//[Java_Class]
		public CrossReference getParentJava_ClassCrossReference_2_0() { return cParentJava_ClassCrossReference_2_0; }

		//ID
		public RuleCall getParentJava_ClassIDTerminalRuleCall_2_0_1() { return cParentJava_ClassIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final Test_FileElements pTest_File;
	private final Java_ClassElements pJava_Class;
	private final ClassesElements pClasses;
	private final Java_MethodElements pJava_Method;
	private final MethodsElements pMethods;
	private final Java_FieldElements pJava_Field;
	private final FieldsElements pFields;
	private final Test_CaseElements pTest_Case;
	private final Refactoring_InstanceElements pRefactoring_Instance;
	private final RefactoringElements pRefactoring;
	private final Pull_Up_RefactoringElements pPull_Up_Refactoring;
	private final Create_Superclass_RefactoringElements pCreate_Superclass_Refactoring;
	private final Test_FlowElements pTest_Flow;
	private final Test_StepElements pTest_Step;
	private final Test_Step_ElementElements pTest_Step_Element;
	private final AssertionElements pAssertion;
	private final Assert_FalseElements pAssert_False;
	private final Assert_TrueElements pAssert_True;
	private final ConditionElements pCondition;
	private final Expect_TrueElements pExpect_True;
	private final Expect_FalseElements pExpect_False;
	private final WarningElements pWarning;
	private final CompileElements pCompile;
	private final SynchronizeElements pSynchronize;
	private final No_RefactoringElements pNo_Refactoring;
	private final Propose_RefactoringElements pPropose_Refactoring;
	private final Propose_Pullup_Method_RefactoringElements pPropose_Pullup_Method_Refactoring;
	private final Propose_Create_Superclass_RefactoringElements pPropose_Create_Superclass_Refactoring;
	private final ContainmentElements pContainment;
	private final Class_ElementElements pClass_Element;
	private final ContainsElements pContains;
	private final Contains_NotElements pContains_Not;
	private final ImplementationElements pImplementation;
	private final ImplementsElements pImplements;
	private final Implements_NotElements pImplements_Not;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tFLOAT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TTCTestGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTest_File = new Test_FileElements();
		this.pJava_Class = new Java_ClassElements();
		this.pClasses = new ClassesElements();
		this.pJava_Method = new Java_MethodElements();
		this.pMethods = new MethodsElements();
		this.pJava_Field = new Java_FieldElements();
		this.pFields = new FieldsElements();
		this.pTest_Case = new Test_CaseElements();
		this.pRefactoring_Instance = new Refactoring_InstanceElements();
		this.pRefactoring = new RefactoringElements();
		this.pPull_Up_Refactoring = new Pull_Up_RefactoringElements();
		this.pCreate_Superclass_Refactoring = new Create_Superclass_RefactoringElements();
		this.pTest_Flow = new Test_FlowElements();
		this.pTest_Step = new Test_StepElements();
		this.pTest_Step_Element = new Test_Step_ElementElements();
		this.pAssertion = new AssertionElements();
		this.pAssert_False = new Assert_FalseElements();
		this.pAssert_True = new Assert_TrueElements();
		this.pCondition = new ConditionElements();
		this.pExpect_True = new Expect_TrueElements();
		this.pExpect_False = new Expect_FalseElements();
		this.pWarning = new WarningElements();
		this.pCompile = new CompileElements();
		this.pSynchronize = new SynchronizeElements();
		this.pNo_Refactoring = new No_RefactoringElements();
		this.pPropose_Refactoring = new Propose_RefactoringElements();
		this.pPropose_Pullup_Method_Refactoring = new Propose_Pullup_Method_RefactoringElements();
		this.pPropose_Create_Superclass_Refactoring = new Propose_Create_Superclass_RefactoringElements();
		this.pContainment = new ContainmentElements();
		this.pClass_Element = new Class_ElementElements();
		this.pContains = new ContainsElements();
		this.pContains_Not = new Contains_NotElements();
		this.pImplementation = new ImplementationElements();
		this.pImplements = new ImplementsElements();
		this.pImplements_Not = new Implements_NotElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ttc.testdsl.TTCTest".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Test_File:
	//	"TestFile" name=ID "{" (test_cases+=Test_Case //(java_methods += Methods) |
	//	//(java_field   += Java_Field) |
	//	//(java_fields  += Fields) |
	//	| java_class+=Java_Class | java_classes+=Classes | java_method+=Java_Method | refactorings+=Refactoring_Instance)* "}";
	public Test_FileElements getTest_FileAccess() {
		return pTest_File;
	}
	
	public ParserRule getTest_FileRule() {
		return getTest_FileAccess().getRule();
	}

	//Java_Class:
	//	"class" name=ID "{" ("package" package=STRING)? "name" class_name=STRING "}";
	public Java_ClassElements getJava_ClassAccess() {
		return pJava_Class;
	}
	
	public ParserRule getJava_ClassRule() {
		return getJava_ClassAccess().getRule();
	}

	//Classes:
	//	"classes" name=ID "{" classes+=[Java_Class] ("," classes+=[Java_Class])* "}";
	public ClassesElements getClassesAccess() {
		return pClasses;
	}
	
	public ParserRule getClassesRule() {
		return getClassesAccess().getRule();
	}

	//Java_Method:
	//	"method" name=ID "{" "name" method_name=STRING ("params" params+=[Java_Class] ("," params+=[Java_Class])*)? "}";
	public Java_MethodElements getJava_MethodAccess() {
		return pJava_Method;
	}
	
	public ParserRule getJava_MethodRule() {
		return getJava_MethodAccess().getRule();
	}

	//Methods:
	//	"methods" name=ID "{" methods+=[Java_Method]* "}";
	public MethodsElements getMethodsAccess() {
		return pMethods;
	}
	
	public ParserRule getMethodsRule() {
		return getMethodsAccess().getRule();
	}

	//Java_Field:
	//	"field" name=ID "{" "name" field_name=STRING "type" type=[Java_Class] "}";
	public Java_FieldElements getJava_FieldAccess() {
		return pJava_Field;
	}
	
	public ParserRule getJava_FieldRule() {
		return getJava_FieldAccess().getRule();
	}

	//Fields:
	//	"fields" name=ID "{" fields+=[Java_Field]* "}";
	public FieldsElements getFieldsAccess() {
		return pFields;
	}
	
	public ParserRule getFieldsRule() {
		return getFieldsAccess().getRule();
	}

	//Test_Case:
	//	"case" name=ID "{" "description" description=STRING "program" java_program=STRING test_flow=Test_Flow "}";
	public Test_CaseElements getTest_CaseAccess() {
		return pTest_Case;
	}
	
	public ParserRule getTest_CaseRule() {
		return getTest_CaseAccess().getRule();
	}

	//Refactoring_Instance:
	//	Pull_Up_Refactoring | Create_Superclass_Refactoring;
	public Refactoring_InstanceElements getRefactoring_InstanceAccess() {
		return pRefactoring_Instance;
	}
	
	public ParserRule getRefactoring_InstanceRule() {
		return getRefactoring_InstanceAccess().getRule();
	}

	//Refactoring:
	//	Refactoring_Instance | No_Refactoring;
	public RefactoringElements getRefactoringAccess() {
		return pRefactoring;
	}
	
	public ParserRule getRefactoringRule() {
		return getRefactoringAccess().getRule();
	}

	//Pull_Up_Refactoring:
	//	"pullup_method" name=ID "{" "parent" parent=[Java_Class] "method" method=[Java_Method] "}";
	public Pull_Up_RefactoringElements getPull_Up_RefactoringAccess() {
		return pPull_Up_Refactoring;
	}
	
	public ParserRule getPull_Up_RefactoringRule() {
		return getPull_Up_RefactoringAccess().getRule();
	}

	//Create_Superclass_Refactoring:
	//	"create_superclass" name=ID "{" "child" child=[Classes] "target" target=[Java_Class] "}";
	public Create_Superclass_RefactoringElements getCreate_Superclass_RefactoringAccess() {
		return pCreate_Superclass_Refactoring;
	}
	
	public ParserRule getCreate_Superclass_RefactoringRule() {
		return getCreate_Superclass_RefactoringAccess().getRule();
	}

	//Test_Flow:
	//	"testflow" "{" step+=Test_Step_Element+ "}";
	public Test_FlowElements getTest_FlowAccess() {
		return pTest_Flow;
	}
	
	public ParserRule getTest_FlowRule() {
		return getTest_FlowAccess().getRule();
	}

	//Test_Step:
	//	"step" "{" elements+=Test_Step_Element+ "}";
	public Test_StepElements getTest_StepAccess() {
		return pTest_Step;
	}
	
	public ParserRule getTest_StepRule() {
		return getTest_StepAccess().getRule();
	}

	//Test_Step_Element: //Propose_Refactoring | Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation
	//	Assertion | Containment | Test_Step | Compile | Synchronize | Condition | Implementation;
	public Test_Step_ElementElements getTest_Step_ElementAccess() {
		return pTest_Step_Element;
	}
	
	public ParserRule getTest_Step_ElementRule() {
		return getTest_Step_ElementAccess().getRule();
	}

	//Assertion:
	//	Assert_False | Assert_True;
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//Assert_False:
	//	"assertFalse" "(" input=[Refactoring] ")";
	public Assert_FalseElements getAssert_FalseAccess() {
		return pAssert_False;
	}
	
	public ParserRule getAssert_FalseRule() {
		return getAssert_FalseAccess().getRule();
	}

	//Assert_True:
	//	"assertTrue" "(" input=[Refactoring] ")";
	public Assert_TrueElements getAssert_TrueAccess() {
		return pAssert_True;
	}
	
	public ParserRule getAssert_TrueRule() {
		return getAssert_TrueAccess().getRule();
	}

	//Condition:
	//	Expect_True | Expect_False;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Expect_True:
	//	"expectTrue" "(" refactoring=[Refactoring] ")" "{" true_steps+=Test_Step_Element+ "}" "else" "{" warning=Warning?
	//	false_steps+=Test_Step_Element+ "}";
	public Expect_TrueElements getExpect_TrueAccess() {
		return pExpect_True;
	}
	
	public ParserRule getExpect_TrueRule() {
		return getExpect_TrueAccess().getRule();
	}

	//Expect_False:
	//	"expectFalse" "(" refactoring=[Refactoring] ")" "{" false_steps+=Test_Step_Element+ "}" "else" "{" warning=Warning?
	//	true_steps+=Test_Step_Element+ "}";
	public Expect_FalseElements getExpect_FalseAccess() {
		return pExpect_False;
	}
	
	public ParserRule getExpect_FalseRule() {
		return getExpect_FalseAccess().getRule();
	}

	//Warning:
	//	"warning" message=STRING;
	public WarningElements getWarningAccess() {
		return pWarning;
	}
	
	public ParserRule getWarningRule() {
		return getWarningAccess().getRule();
	}

	//Compile:
	//	{Compile} "compile";
	public CompileElements getCompileAccess() {
		return pCompile;
	}
	
	public ParserRule getCompileRule() {
		return getCompileAccess().getRule();
	}

	//Synchronize:
	//	{Synchronize} "synchronize";
	public SynchronizeElements getSynchronizeAccess() {
		return pSynchronize;
	}
	
	public ParserRule getSynchronizeRule() {
		return getSynchronizeAccess().getRule();
	}

	//No_Refactoring:
	//	{No_Refactoring} "none";
	public No_RefactoringElements getNo_RefactoringAccess() {
		return pNo_Refactoring;
	}
	
	public ParserRule getNo_RefactoringRule() {
		return getNo_RefactoringAccess().getRule();
	}

	//Propose_Refactoring:
	//	Propose_Pullup_Method_Refactoring | Propose_Create_Superclass_Refactoring;
	public Propose_RefactoringElements getPropose_RefactoringAccess() {
		return pPropose_Refactoring;
	}
	
	public ParserRule getPropose_RefactoringRule() {
		return getPropose_RefactoringAccess().getRule();
	}

	//Propose_Pullup_Method_Refactoring:
	//	"proposePullUpRefactoring" "(" refactoring=([Pull_Up_Refactoring] | No_Refactoring) ")";
	public Propose_Pullup_Method_RefactoringElements getPropose_Pullup_Method_RefactoringAccess() {
		return pPropose_Pullup_Method_Refactoring;
	}
	
	public ParserRule getPropose_Pullup_Method_RefactoringRule() {
		return getPropose_Pullup_Method_RefactoringAccess().getRule();
	}

	//Propose_Create_Superclass_Refactoring:
	//	"proposeCreateSuperclassRefactoring" "(" refactoring=([Create_Superclass_Refactoring] | No_Refactoring) ")";
	public Propose_Create_Superclass_RefactoringElements getPropose_Create_Superclass_RefactoringAccess() {
		return pPropose_Create_Superclass_Refactoring;
	}
	
	public ParserRule getPropose_Create_Superclass_RefactoringRule() {
		return getPropose_Create_Superclass_RefactoringAccess().getRule();
	}

	//Containment:
	//	Contains | Contains_Not;
	public ContainmentElements getContainmentAccess() {
		return pContainment;
	}
	
	public ParserRule getContainmentRule() {
		return getContainmentAccess().getRule();
	}

	//Class_Element:
	//	Java_Field | Java_Method;
	public Class_ElementElements getClass_ElementAccess() {
		return pClass_Element;
	}
	
	public ParserRule getClass_ElementRule() {
		return getClass_ElementAccess().getRule();
	}

	//Contains:
	//	class=[Java_Class] "contains" contains=[Class_Element];
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}

	//Contains_Not:
	//	class=[Java_Class] "~contains" contains=[Class_Element];
	public Contains_NotElements getContains_NotAccess() {
		return pContains_Not;
	}
	
	public ParserRule getContains_NotRule() {
		return getContains_NotAccess().getRule();
	}

	//Implementation:
	//	Implements | Implements_Not;
	public ImplementationElements getImplementationAccess() {
		return pImplementation;
	}
	
	public ParserRule getImplementationRule() {
		return getImplementationAccess().getRule();
	}

	//Implements:
	//	child=[Java_Class] "extends" parent=[Java_Class];
	public ImplementsElements getImplementsAccess() {
		return pImplements;
	}
	
	public ParserRule getImplementsRule() {
		return getImplementsAccess().getRule();
	}

	//Implements_Not:
	//	child=[Java_Class] "~extends" parent=[Java_Class];
	public Implements_NotElements getImplements_NotAccess() {
		return pImplements_Not;
	}
	
	public ParserRule getImplements_NotRule() {
		return getImplements_NotAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal FLOAT returns ecore::EFloat:
	//	INT "." INT "d"?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	INT "." INT "f";
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal STRING:
	//	"\"" " ".."~"* "\"";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
